@startuml

package "Post Service" <<Rectangle>> {
    

class Posts {
    id 
    ..
    id_active
    ..
    id_comment
    ..
    date
    ..
    content
}

note left of Posts
Вся информация о посте: 
акивность на нем, 
комментарии, дата 
и контент поста
end note

class Comments {
    id
    ..
    id_user
    ..
    date
    ..
    text_comment
    ..
    id_answered_comment
}

note bottom of Comments
Комментарии оставленные
пользователем вместе с
датой и ссылкой на 
ответный комментарий
если это необходимо
end note

class Active {
    id
    ..
    type (like / see)
    ..
    id_user
    ..
    date
    ..
    time
}

note bottom of Active
Проявление активности 
(лайк / просмотр) от 
какого-то человека
вместе с датой и 
временем
end note

class WallUsers {
    id_user
    ..
    id_post
}

note left of WallUsers
Стена постов от 
каждого пользователя
end note

}

package "User Service" <<Rectangle>> {
    

class Users {
    id_user
    ..
    name
    ..
    surname 
    ..
    birthday
    ..
    role 
}

note right of Users
Главная информация 
о пользователе, 
его имя, фамилия, 
роль и день рождения
end note


class Register {
    email
    ..
    password
    ..
    sha_key (private)
    ..
    sha-key (public)
    ..
    id_user
}

note right of Register
Информация, необходимая
для регистрации
end note

class Activity {
    id_user
    ..
    id_stat 
    ..
    id_post_stat
    ..
    list_friends
    ..
    status
}

note left of Activity
Информация показывающая
активность и статистику
пользователя в социальной
сети
end note

class ListFrineds {
    id
    ..
    id_user
}

note left of ListFrineds
Список друзей
end note

}

package "Analytics Service" <<Rectangle>> {
    


class UserStat {
    id
    ..
    id_user
    ..
    number_posts
    ..
    last_activity
    ..
    last_online
}

note top of UserStat
Статистика, которую 
можно собрать у клиента
end note


class PostStat {
    id
    ..
    id_post
    ..
    number_likes
    ..
    number_comments
    ..
    number_seeing
    ..
    data_last_update
    ..
    type_content
    ..
    id_active_stat
}

note top of PostStat
Статистика, которую 
можно собрать у поста
end note

class ActiveStat {
    id
    ..
    id_user
    ..
    id_active
    ..
    type
    ..
    friend (yes/no)
    ..
    last_update
}

note left of ActiveStat
Статистика, которую 
можно собрать у
активности поста
end note

}

package "API Service" <<Rectangle>> {
    class API {
        id
        ..
        request 
        ..
        sequence_number
        ..
        id_of_last_request
        ..
        body_of_request
    }

    note left of API
    Данные, необходимые 
    для обработки запроса
    end note

    Class ServicesHandles {
        UserService
        ..
        PostService
        ..
        AnalyticsService
    }

    note left of ServicesHandles
    Ручки, необходимые 
    для взаимодействия с сервисами
    end note

    class Ongoing {
        id
        ..
        id_of_request
        ..
        service
        ..
        time
        ..
        size_request
    }
    note bottom of Ongoing
    Информация об 
    обрабатывающемся запросе
    end note
}

WallUsers::id_post --> Posts


Posts::id_active --> Active
Posts::id_comment --> Comments


WallUsers::id_user -->Users  #line.dotted;

Register::id_user --> Users

Users --> Activity

Activity::id_post_stat --> PostStat #line.dotted;
Activity::id_stat --> UserStat #line.dotted;
Activity::list_friends --> ListFrineds
PostStat::id_active_stat --> ActiveStat

ServicesHandles::UserService --> Register  #line.dotted;
ServicesHandles::UserService --> Users  #line.dotted;
ServicesHandles::PostService --> Posts  #line.dotted;
ServicesHandles::AnalyticsService --> PostStat  #line.dotted;
ServicesHandles::AnalyticsService --> UserStat  #line.dotted;

API::body_of_request --> ServicesHandles

@enduml