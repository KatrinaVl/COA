version: '3'

services:
    api:
        build: 
            context: .
            dockerfile: api/Dockerfile 
        environment:
            API_SERVER_URL: "http://api:8090"
            USERSERVICE_SERVER_URL: "http://userservice:8091"
            POST_SERVER_URL: "http://post_server:50051"
            # - PYTHONPATH=/docs
        # environment:
            PYTHONPATH : '/docs'
            POST_SERVER_HOST : post_server
            POST_SERVER_ADDR : post_server:50051
        ports:
            - 8090:8090
        depends_on:
            - userservice
            - proto
            - post_server
        networks:
            - social-network

    userservice:
        build: 
            context: userservice
        # environment:
        #     - FLASK_ENV=development
        ports:
            - 8091:8091
        networks:
            - social-network
        depends_on:
            - database

    post_server:
        build: 
            context: .
            dockerfile: post_server/Dockerfile 
        ports:
            - "50051:50051"
        networks:
            - social-network
        depends_on:
            kafka-setup:
                condition: service_completed_successfully
            database:
                condition: service_started
            proto:
                condition: service_started
                # condition: service_healthy
        environment:
            KAFKA_BOOTSTRAP_SERVERS : kafka:9092
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U post_server"]
            interval: 5s
            timeout: 5s
            retries: 5
            

    proto:
        build:
            context: .
            dockerfile: proto/Dockerfile 
        environment:
            PYTHONPATH : '/docs'
        networks:
            - social-network
        volumes:
            - ./proto:/docs/proto


    database:
        # hostname: postgres
        image: postgres:12

        environment:
            POSTGRES_USER: user
            POSTGRES_PASSWORD: password
            POSTGRES_DB: user_db
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - social-network

    # tests:
    #     build:
    #         context: tests
    #     environment:
    #         API_SERVER_URL: "http://api:8090"
    #         USERSERVICE_SERVER_URL: "http://userservice:8091"
    #     networks:
    #         - social-network

    #     depends_on:
    #         - api
    #         - userservice

    # zookeeper:
    #     image: wurstmeister/zookeeper:3.4.6
    #     networks:
    #         - social-network
    #     ports:
    #     - "2181:2181"

    # kafka:
    #     image: wurstmeister/kafka:2.12-2.2.1
    #     ports:
    #     - "9092:9092"
    #     environment:
    #         KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    #         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    #         KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    #     depends_on:
    #         - zookeeper
    #     networks:
    #         - social-network
    #     hostname: kafka
    #     healthcheck:
    #         test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 5

    zookeeper:
        image: confluentinc/cp-zookeeper:7.0.0
        container_name: zookeeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        ports:
            - "2181:2181"
        networks:
            - social-network

    # Kafka message broker
    kafka:
        image: confluentinc/cp-kafka:7.0.0
        container_name: kafka
        depends_on:
            - zookeeper
            # zookeeper:
            #     condition: service_completed_successfully
        ports:
            - "9092:9092"
            - "29092:29092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        networks:
            - social-network

    # Kafka UI - веб-интерфейс для мониторинга и управления Kafka
    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        container_name: kafka-ui
        depends_on:
            - kafka
            # kafka:
            #     condition: service_completed_successfully
        ports:
            - "8080:8080"
        environment:
            KAFKA_CLUSTERS_0_NAME: local
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
            KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
        networks:
            - social-network

    # Kafka topic initialization
    kafka-setup:
        image: confluentinc/cp-kafka:7.0.0
        container_name: kafka-setup
        depends_on:
            - kafka
            # kafka:
            #     condition: service_completed_successfully
        command: >
            bash -c "
                echo Waiting for Kafka to be ready...
                cub kafka-ready -b kafka:9092 1 40
                echo Creating Kafka topics...
                kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic user_registered
                kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic post_viewed
                kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic post_liked
                kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic post_commented
                echo Kafka topics created.
            "
        networks:
            - social-network
volumes:
    postgres_data:

networks:
    social-network: